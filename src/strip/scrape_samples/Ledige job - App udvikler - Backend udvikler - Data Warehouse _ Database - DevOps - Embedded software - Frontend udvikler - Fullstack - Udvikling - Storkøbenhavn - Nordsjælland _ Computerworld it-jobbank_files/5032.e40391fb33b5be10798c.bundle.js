"use strict";(self.webpackChunkjix=self.webpackChunkjix||[]).push([[5032],{1449:(e,r,t)=>{t.d(r,{Ht:()=>degreesToRadians,lF:()=>lengthToRadians,uf:()=>featureCollection,vi:()=>radiansToDegrees,xm:()=>point,yu:()=>polygon});var o=6371008.8,n={centimeters:637100880,centimetres:637100880,degrees:57.22891354143274,feet:20902260.511392,inches:39.37*o,kilometers:6371.0088,kilometres:6371.0088,meters:o,metres:o,miles:3958.761333810546,millimeters:6371008800,millimetres:6371008800,nauticalmiles:o/1852,radians:1,yards:5825721.287490856};function feature(e,r,t){void 0===t&&(t={});var o={type:"Feature"};return(0===t.id||t.id)&&(o.id=t.id),t.bbox&&(o.bbox=t.bbox),o.properties=r||{},o.geometry=e,o}function point(e,r,t){if(void 0===t&&(t={}),!e)throw new Error("coordinates is required");if(!Array.isArray(e))throw new Error("coordinates must be an Array");if(e.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!isNumber(e[0])||!isNumber(e[1]))throw new Error("coordinates must contain numbers");return feature({type:"Point",coordinates:e},r,t)}function polygon(e,r,t){void 0===t&&(t={});for(var o=0,n=e;o<n.length;o++){var i=n[o];if(i.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var a=0;a<i[i.length-1].length;a++)if(i[i.length-1][a]!==i[0][a])throw new Error("First and last Position are not equivalent.")}return feature({type:"Polygon",coordinates:e},r,t)}function featureCollection(e,r){void 0===r&&(r={});var t={type:"FeatureCollection"};return r.id&&(t.id=r.id),r.bbox&&(t.bbox=r.bbox),t.features=e,t}function lengthToRadians(e,r){void 0===r&&(r="kilometers");var t=n[r];if(!t)throw new Error(r+" units is invalid");return e/t}function radiansToDegrees(e){return 180*(e%(2*Math.PI))/Math.PI}function degreesToRadians(e){return e%360*Math.PI/180}function isNumber(e){return!isNaN(e)&&null!==e&&!Array.isArray(e)}},39034:(e,r,t)=>{t.d(r,{pZ:()=>coordEach});t(1449);function coordEach(e,r,t){if(null!==e)for(var o,n,i,a,s,l,u,f,c=0,g=0,d=e.type,h="FeatureCollection"===d,m="Feature"===d,y=h?e.features.length:1,b=0;b<y;b++){s=(f=!!(u=h?e.features[b].geometry:m?e.geometry:e)&&"GeometryCollection"===u.type)?u.geometries.length:1;for(var v=0;v<s;v++){var w=0,p=0;if(null!==(a=f?u.geometries[v]:u)){l=a.coordinates;var P=a.type;switch(c=!t||"Polygon"!==P&&"MultiPolygon"!==P?0:1,P){case null:break;case"Point":if(!1===r(l,g,b,w,p))return!1;g++,w++;break;case"LineString":case"MultiPoint":for(o=0;o<l.length;o++){if(!1===r(l[o],g,b,w,p))return!1;g++,"MultiPoint"===P&&w++}"LineString"===P&&w++;break;case"Polygon":case"MultiLineString":for(o=0;o<l.length;o++){for(n=0;n<l[o].length-c;n++){if(!1===r(l[o][n],g,b,w,p))return!1;g++}"MultiLineString"===P&&w++,"Polygon"===P&&p++}"Polygon"===P&&w++;break;case"MultiPolygon":for(o=0;o<l.length;o++){for(p=0,n=0;n<l[o].length;n++){for(i=0;i<l[o][n].length-c;i++){if(!1===r(l[o][n][i],g,b,w,p))return!1;g++}p++}w++}break;case"GeometryCollection":for(o=0;o<a.geometries.length;o++)if(!1===coordEach(a.geometries[o],r,t))return!1;break;default:throw new Error("Unknown Geometry Type")}}}}}}}]);
//# sourceMappingURL=5032.e40391fb33b5be10798c.bundle.js.map